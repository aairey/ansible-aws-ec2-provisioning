---
# tasks file for aws-ec2-provisioning/
- fail: msg="The minimum Ansible version required to run is 2.0.1. To upgrade run 'sudo pip install --upgrade ansible'."
  when: ansible_version.major|int != 2 and ansible_version.minor|int < 0 and ansible_version.revision|int < 1

#TODO merge with aws-lc/find-ami
- name: Search for the latest vivareal ami
  ec2_ami_find:
    name: "{{ ec2_find_ami_name }}"
    owner: "{{ aws_owner | default('self') }}"
    sort: name
    region: "{{ region }}"
    sort_order: descending
    sort_end: 1
  register: ec2_ami_find
  when: ec2_find_ami_name is defined

- name: set fact ec2_base_image when ec2_find_ami_name is defined
  set_fact: ec2_base_image="{{ ec2_ami_find.results[0].ami_id }}"
  when: ec2_find_ami_name is defined

- name: debug steps
  debug: var=instances


- name: launch instances
  ec2:
    assign_public_ip: "{{ item.ec2_assign_public_ip | default('no') }}"
    count: "{{ item.ec2_count | default(1) }}"
    ebs_optimized: "{{ item.ec2_ebs_optimized | default(false) }}"
    group_id: "{{ item.ec2_sg_id }}"
    instance_type: "{{ item.ec2_instance_type | default('t2.micro') }}"
    instance_profile_name:  "{{ item.ec2_instance_profile_name | default ('')}}"
    user_data: "{{ item.ec2_user_data | default (omit) }}"
    image: "{{ item.ec2_base_image }}"
    key_name: "{{ item.ec2_key_name }}"
    monitoring: "{{ item.ec2_monitoring | default('yes') }}"
    region: "{{ item.region }}"
    vpc_subnet_id: "{{ item.ec2_vpc_subnet_id }}"
    instance_tags: "{{ item.aws_resource_tags }}"
    state: "{{ item.state | default('present') }}"
    volumes: "{{ item.ec2_volumes | default(omit) }}"
  with_items: "{{ instances }}"
  register: ec2

- name: debug ec2
  debug: var=ec2


- name: Add new instance to host group
  add_host: hostname="{{ item.1.private_ip }}" groupname=ec2_launched ec2_id="{{ item.1.id }}"
  with_subelements:
   - "{{ ec2.results }}"
   - instances

- name: Wait for public SSH to come up
  wait_for: host="{{ item.1.public_ip }}" port=22 delay=60 timeout=320 state=started
  when: item.1.public_ip is defined
  with_subelements:
   - "{{ ec2.results }}"
   - instances

- name: Wait for SSH to come up
  wait_for: host="{{ item.1.private_ip }}" port=22 delay=60 timeout=320 state=started
  when: item.1.public_ip is undefined
  with_subelements:
   - "{{ ec2.results }}"
   - instances

- name: set fact ec2_ami_instance_id
  set_fact: ec2_ami_instance_id="{{ item.instance_ids[0] }}"
  when: ec2 is defined
  with_items:
   - "{{ ec2.results }}"
